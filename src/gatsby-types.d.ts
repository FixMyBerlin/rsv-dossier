/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type GeometryJson or null if there are no children of given type on this node */
  readonly childGeometryJson: Maybe<GeometryJson>;
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type MetaJson or null if there are no children of given type on this node */
  readonly childMetaJson: Maybe<MetaJson>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type GeometryJson */
  readonly childrenGeometryJson: Maybe<ReadonlyArray<Maybe<GeometryJson>>>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type MetaJson */
  readonly childrenMetaJson: Maybe<ReadonlyArray<Maybe<MetaJson>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly hash: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'childGeometryJson.bbox'
  | 'childGeometryJson.children'
  | 'childGeometryJson.children.children'
  | 'childGeometryJson.children.children.children'
  | 'childGeometryJson.children.children.id'
  | 'childGeometryJson.children.id'
  | 'childGeometryJson.children.internal.content'
  | 'childGeometryJson.children.internal.contentDigest'
  | 'childGeometryJson.children.internal.description'
  | 'childGeometryJson.children.internal.fieldOwners'
  | 'childGeometryJson.children.internal.ignoreType'
  | 'childGeometryJson.children.internal.mediaType'
  | 'childGeometryJson.children.internal.owner'
  | 'childGeometryJson.children.internal.type'
  | 'childGeometryJson.children.parent.children'
  | 'childGeometryJson.children.parent.id'
  | 'childGeometryJson.crs.properties.name'
  | 'childGeometryJson.crs.type'
  | 'childGeometryJson.features'
  | 'childGeometryJson.features.bbox'
  | 'childGeometryJson.features.geometry.coordinates'
  | 'childGeometryJson.features.geometry.type'
  | 'childGeometryJson.features.properties.description_planning_phase'
  | 'childGeometryJson.features.properties.detail_level'
  | 'childGeometryJson.features.properties.discarded'
  | 'childGeometryJson.features.properties.id'
  | 'childGeometryJson.features.properties.id_rsv'
  | 'childGeometryJson.features.properties.length'
  | 'childGeometryJson.features.properties.planning_phase'
  | 'childGeometryJson.features.properties.stand'
  | 'childGeometryJson.features.properties.state'
  | 'childGeometryJson.features.properties.variant'
  | 'childGeometryJson.features.type'
  | 'childGeometryJson.id'
  | 'childGeometryJson.internal.content'
  | 'childGeometryJson.internal.contentDigest'
  | 'childGeometryJson.internal.description'
  | 'childGeometryJson.internal.fieldOwners'
  | 'childGeometryJson.internal.ignoreType'
  | 'childGeometryJson.internal.mediaType'
  | 'childGeometryJson.internal.owner'
  | 'childGeometryJson.internal.type'
  | 'childGeometryJson.jsonId'
  | 'childGeometryJson.parent.children'
  | 'childGeometryJson.parent.children.children'
  | 'childGeometryJson.parent.children.id'
  | 'childGeometryJson.parent.id'
  | 'childGeometryJson.parent.internal.content'
  | 'childGeometryJson.parent.internal.contentDigest'
  | 'childGeometryJson.parent.internal.description'
  | 'childGeometryJson.parent.internal.fieldOwners'
  | 'childGeometryJson.parent.internal.ignoreType'
  | 'childGeometryJson.parent.internal.mediaType'
  | 'childGeometryJson.parent.internal.owner'
  | 'childGeometryJson.parent.internal.type'
  | 'childGeometryJson.parent.parent.children'
  | 'childGeometryJson.parent.parent.id'
  | 'childGeometryJson.type'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'childMetaJson.children'
  | 'childMetaJson.children.children'
  | 'childMetaJson.children.children.children'
  | 'childMetaJson.children.children.id'
  | 'childMetaJson.children.id'
  | 'childMetaJson.children.internal.content'
  | 'childMetaJson.children.internal.contentDigest'
  | 'childMetaJson.children.internal.description'
  | 'childMetaJson.children.internal.fieldOwners'
  | 'childMetaJson.children.internal.ignoreType'
  | 'childMetaJson.children.internal.mediaType'
  | 'childMetaJson.children.internal.owner'
  | 'childMetaJson.children.internal.type'
  | 'childMetaJson.children.parent.children'
  | 'childMetaJson.children.parent.id'
  | 'childMetaJson.cost'
  | 'childMetaJson.gatsbyPath'
  | 'childMetaJson.general.description'
  | 'childMetaJson.general.from'
  | 'childMetaJson.general.length'
  | 'childMetaJson.general.name'
  | 'childMetaJson.general.ref'
  | 'childMetaJson.general.source'
  | 'childMetaJson.general.to'
  | 'childMetaJson.geoJson.bbox'
  | 'childMetaJson.geoJson.children'
  | 'childMetaJson.geoJson.children.children'
  | 'childMetaJson.geoJson.children.id'
  | 'childMetaJson.geoJson.crs.type'
  | 'childMetaJson.geoJson.features'
  | 'childMetaJson.geoJson.features.bbox'
  | 'childMetaJson.geoJson.features.type'
  | 'childMetaJson.geoJson.id'
  | 'childMetaJson.geoJson.internal.content'
  | 'childMetaJson.geoJson.internal.contentDigest'
  | 'childMetaJson.geoJson.internal.description'
  | 'childMetaJson.geoJson.internal.fieldOwners'
  | 'childMetaJson.geoJson.internal.ignoreType'
  | 'childMetaJson.geoJson.internal.mediaType'
  | 'childMetaJson.geoJson.internal.owner'
  | 'childMetaJson.geoJson.internal.type'
  | 'childMetaJson.geoJson.jsonId'
  | 'childMetaJson.geoJson.parent.children'
  | 'childMetaJson.geoJson.parent.id'
  | 'childMetaJson.geoJson.type'
  | 'childMetaJson.id'
  | 'childMetaJson.internal.content'
  | 'childMetaJson.internal.contentDigest'
  | 'childMetaJson.internal.description'
  | 'childMetaJson.internal.fieldOwners'
  | 'childMetaJson.internal.ignoreType'
  | 'childMetaJson.internal.mediaType'
  | 'childMetaJson.internal.owner'
  | 'childMetaJson.internal.type'
  | 'childMetaJson.jsonId'
  | 'childMetaJson.parent.children'
  | 'childMetaJson.parent.children.children'
  | 'childMetaJson.parent.children.id'
  | 'childMetaJson.parent.id'
  | 'childMetaJson.parent.internal.content'
  | 'childMetaJson.parent.internal.contentDigest'
  | 'childMetaJson.parent.internal.description'
  | 'childMetaJson.parent.internal.fieldOwners'
  | 'childMetaJson.parent.internal.ignoreType'
  | 'childMetaJson.parent.internal.mediaType'
  | 'childMetaJson.parent.internal.owner'
  | 'childMetaJson.parent.internal.type'
  | 'childMetaJson.parent.parent.children'
  | 'childMetaJson.parent.parent.id'
  | 'childMetaJson.references.website'
  | 'childMetaJson.stakeholders'
  | 'childMetaJson.stakeholders.name'
  | 'childMetaJson.stakeholders.roles'
  | 'childMetaJson.state'
  | 'childMetaJson.staticMap.absolutePath'
  | 'childMetaJson.staticMap.accessTime'
  | 'childMetaJson.staticMap.atime'
  | 'childMetaJson.staticMap.atimeMs'
  | 'childMetaJson.staticMap.base'
  | 'childMetaJson.staticMap.birthTime'
  | 'childMetaJson.staticMap.birthtime'
  | 'childMetaJson.staticMap.birthtimeMs'
  | 'childMetaJson.staticMap.blksize'
  | 'childMetaJson.staticMap.blocks'
  | 'childMetaJson.staticMap.changeTime'
  | 'childMetaJson.staticMap.childGeometryJson.bbox'
  | 'childMetaJson.staticMap.childGeometryJson.children'
  | 'childMetaJson.staticMap.childGeometryJson.features'
  | 'childMetaJson.staticMap.childGeometryJson.id'
  | 'childMetaJson.staticMap.childGeometryJson.jsonId'
  | 'childMetaJson.staticMap.childGeometryJson.type'
  | 'childMetaJson.staticMap.childImageSharp.children'
  | 'childMetaJson.staticMap.childImageSharp.gatsbyImageData'
  | 'childMetaJson.staticMap.childImageSharp.id'
  | 'childMetaJson.staticMap.childMetaJson.children'
  | 'childMetaJson.staticMap.childMetaJson.cost'
  | 'childMetaJson.staticMap.childMetaJson.gatsbyPath'
  | 'childMetaJson.staticMap.childMetaJson.id'
  | 'childMetaJson.staticMap.childMetaJson.jsonId'
  | 'childMetaJson.staticMap.childMetaJson.stakeholders'
  | 'childMetaJson.staticMap.childMetaJson.state'
  | 'childMetaJson.staticMap.children'
  | 'childMetaJson.staticMap.childrenGeometryJson'
  | 'childMetaJson.staticMap.childrenGeometryJson.bbox'
  | 'childMetaJson.staticMap.childrenGeometryJson.children'
  | 'childMetaJson.staticMap.childrenGeometryJson.features'
  | 'childMetaJson.staticMap.childrenGeometryJson.id'
  | 'childMetaJson.staticMap.childrenGeometryJson.jsonId'
  | 'childMetaJson.staticMap.childrenGeometryJson.type'
  | 'childMetaJson.staticMap.childrenImageSharp'
  | 'childMetaJson.staticMap.childrenImageSharp.children'
  | 'childMetaJson.staticMap.childrenImageSharp.gatsbyImageData'
  | 'childMetaJson.staticMap.childrenImageSharp.id'
  | 'childMetaJson.staticMap.childrenMetaJson'
  | 'childMetaJson.staticMap.childrenMetaJson.children'
  | 'childMetaJson.staticMap.childrenMetaJson.cost'
  | 'childMetaJson.staticMap.childrenMetaJson.gatsbyPath'
  | 'childMetaJson.staticMap.childrenMetaJson.id'
  | 'childMetaJson.staticMap.childrenMetaJson.jsonId'
  | 'childMetaJson.staticMap.childrenMetaJson.stakeholders'
  | 'childMetaJson.staticMap.childrenMetaJson.state'
  | 'childMetaJson.staticMap.children.children'
  | 'childMetaJson.staticMap.children.id'
  | 'childMetaJson.staticMap.ctime'
  | 'childMetaJson.staticMap.ctimeMs'
  | 'childMetaJson.staticMap.dev'
  | 'childMetaJson.staticMap.dir'
  | 'childMetaJson.staticMap.ext'
  | 'childMetaJson.staticMap.extension'
  | 'childMetaJson.staticMap.gid'
  | 'childMetaJson.staticMap.hash'
  | 'childMetaJson.staticMap.id'
  | 'childMetaJson.staticMap.ino'
  | 'childMetaJson.staticMap.internal.content'
  | 'childMetaJson.staticMap.internal.contentDigest'
  | 'childMetaJson.staticMap.internal.description'
  | 'childMetaJson.staticMap.internal.fieldOwners'
  | 'childMetaJson.staticMap.internal.ignoreType'
  | 'childMetaJson.staticMap.internal.mediaType'
  | 'childMetaJson.staticMap.internal.owner'
  | 'childMetaJson.staticMap.internal.type'
  | 'childMetaJson.staticMap.mode'
  | 'childMetaJson.staticMap.modifiedTime'
  | 'childMetaJson.staticMap.mtime'
  | 'childMetaJson.staticMap.mtimeMs'
  | 'childMetaJson.staticMap.name'
  | 'childMetaJson.staticMap.nlink'
  | 'childMetaJson.staticMap.parent.children'
  | 'childMetaJson.staticMap.parent.id'
  | 'childMetaJson.staticMap.prettySize'
  | 'childMetaJson.staticMap.publicURL'
  | 'childMetaJson.staticMap.rdev'
  | 'childMetaJson.staticMap.relativeDirectory'
  | 'childMetaJson.staticMap.relativePath'
  | 'childMetaJson.staticMap.root'
  | 'childMetaJson.staticMap.size'
  | 'childMetaJson.staticMap.sourceInstanceName'
  | 'childMetaJson.staticMap.uid'
  | 'children'
  | 'childrenGeometryJson'
  | 'childrenGeometryJson.bbox'
  | 'childrenGeometryJson.children'
  | 'childrenGeometryJson.children.children'
  | 'childrenGeometryJson.children.children.children'
  | 'childrenGeometryJson.children.children.id'
  | 'childrenGeometryJson.children.id'
  | 'childrenGeometryJson.children.internal.content'
  | 'childrenGeometryJson.children.internal.contentDigest'
  | 'childrenGeometryJson.children.internal.description'
  | 'childrenGeometryJson.children.internal.fieldOwners'
  | 'childrenGeometryJson.children.internal.ignoreType'
  | 'childrenGeometryJson.children.internal.mediaType'
  | 'childrenGeometryJson.children.internal.owner'
  | 'childrenGeometryJson.children.internal.type'
  | 'childrenGeometryJson.children.parent.children'
  | 'childrenGeometryJson.children.parent.id'
  | 'childrenGeometryJson.crs.properties.name'
  | 'childrenGeometryJson.crs.type'
  | 'childrenGeometryJson.features'
  | 'childrenGeometryJson.features.bbox'
  | 'childrenGeometryJson.features.geometry.coordinates'
  | 'childrenGeometryJson.features.geometry.type'
  | 'childrenGeometryJson.features.properties.description_planning_phase'
  | 'childrenGeometryJson.features.properties.detail_level'
  | 'childrenGeometryJson.features.properties.discarded'
  | 'childrenGeometryJson.features.properties.id'
  | 'childrenGeometryJson.features.properties.id_rsv'
  | 'childrenGeometryJson.features.properties.length'
  | 'childrenGeometryJson.features.properties.planning_phase'
  | 'childrenGeometryJson.features.properties.stand'
  | 'childrenGeometryJson.features.properties.state'
  | 'childrenGeometryJson.features.properties.variant'
  | 'childrenGeometryJson.features.type'
  | 'childrenGeometryJson.id'
  | 'childrenGeometryJson.internal.content'
  | 'childrenGeometryJson.internal.contentDigest'
  | 'childrenGeometryJson.internal.description'
  | 'childrenGeometryJson.internal.fieldOwners'
  | 'childrenGeometryJson.internal.ignoreType'
  | 'childrenGeometryJson.internal.mediaType'
  | 'childrenGeometryJson.internal.owner'
  | 'childrenGeometryJson.internal.type'
  | 'childrenGeometryJson.jsonId'
  | 'childrenGeometryJson.parent.children'
  | 'childrenGeometryJson.parent.children.children'
  | 'childrenGeometryJson.parent.children.id'
  | 'childrenGeometryJson.parent.id'
  | 'childrenGeometryJson.parent.internal.content'
  | 'childrenGeometryJson.parent.internal.contentDigest'
  | 'childrenGeometryJson.parent.internal.description'
  | 'childrenGeometryJson.parent.internal.fieldOwners'
  | 'childrenGeometryJson.parent.internal.ignoreType'
  | 'childrenGeometryJson.parent.internal.mediaType'
  | 'childrenGeometryJson.parent.internal.owner'
  | 'childrenGeometryJson.parent.internal.type'
  | 'childrenGeometryJson.parent.parent.children'
  | 'childrenGeometryJson.parent.parent.id'
  | 'childrenGeometryJson.type'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'childrenMetaJson'
  | 'childrenMetaJson.children'
  | 'childrenMetaJson.children.children'
  | 'childrenMetaJson.children.children.children'
  | 'childrenMetaJson.children.children.id'
  | 'childrenMetaJson.children.id'
  | 'childrenMetaJson.children.internal.content'
  | 'childrenMetaJson.children.internal.contentDigest'
  | 'childrenMetaJson.children.internal.description'
  | 'childrenMetaJson.children.internal.fieldOwners'
  | 'childrenMetaJson.children.internal.ignoreType'
  | 'childrenMetaJson.children.internal.mediaType'
  | 'childrenMetaJson.children.internal.owner'
  | 'childrenMetaJson.children.internal.type'
  | 'childrenMetaJson.children.parent.children'
  | 'childrenMetaJson.children.parent.id'
  | 'childrenMetaJson.cost'
  | 'childrenMetaJson.gatsbyPath'
  | 'childrenMetaJson.general.description'
  | 'childrenMetaJson.general.from'
  | 'childrenMetaJson.general.length'
  | 'childrenMetaJson.general.name'
  | 'childrenMetaJson.general.ref'
  | 'childrenMetaJson.general.source'
  | 'childrenMetaJson.general.to'
  | 'childrenMetaJson.geoJson.bbox'
  | 'childrenMetaJson.geoJson.children'
  | 'childrenMetaJson.geoJson.children.children'
  | 'childrenMetaJson.geoJson.children.id'
  | 'childrenMetaJson.geoJson.crs.type'
  | 'childrenMetaJson.geoJson.features'
  | 'childrenMetaJson.geoJson.features.bbox'
  | 'childrenMetaJson.geoJson.features.type'
  | 'childrenMetaJson.geoJson.id'
  | 'childrenMetaJson.geoJson.internal.content'
  | 'childrenMetaJson.geoJson.internal.contentDigest'
  | 'childrenMetaJson.geoJson.internal.description'
  | 'childrenMetaJson.geoJson.internal.fieldOwners'
  | 'childrenMetaJson.geoJson.internal.ignoreType'
  | 'childrenMetaJson.geoJson.internal.mediaType'
  | 'childrenMetaJson.geoJson.internal.owner'
  | 'childrenMetaJson.geoJson.internal.type'
  | 'childrenMetaJson.geoJson.jsonId'
  | 'childrenMetaJson.geoJson.parent.children'
  | 'childrenMetaJson.geoJson.parent.id'
  | 'childrenMetaJson.geoJson.type'
  | 'childrenMetaJson.id'
  | 'childrenMetaJson.internal.content'
  | 'childrenMetaJson.internal.contentDigest'
  | 'childrenMetaJson.internal.description'
  | 'childrenMetaJson.internal.fieldOwners'
  | 'childrenMetaJson.internal.ignoreType'
  | 'childrenMetaJson.internal.mediaType'
  | 'childrenMetaJson.internal.owner'
  | 'childrenMetaJson.internal.type'
  | 'childrenMetaJson.jsonId'
  | 'childrenMetaJson.parent.children'
  | 'childrenMetaJson.parent.children.children'
  | 'childrenMetaJson.parent.children.id'
  | 'childrenMetaJson.parent.id'
  | 'childrenMetaJson.parent.internal.content'
  | 'childrenMetaJson.parent.internal.contentDigest'
  | 'childrenMetaJson.parent.internal.description'
  | 'childrenMetaJson.parent.internal.fieldOwners'
  | 'childrenMetaJson.parent.internal.ignoreType'
  | 'childrenMetaJson.parent.internal.mediaType'
  | 'childrenMetaJson.parent.internal.owner'
  | 'childrenMetaJson.parent.internal.type'
  | 'childrenMetaJson.parent.parent.children'
  | 'childrenMetaJson.parent.parent.id'
  | 'childrenMetaJson.references.website'
  | 'childrenMetaJson.stakeholders'
  | 'childrenMetaJson.stakeholders.name'
  | 'childrenMetaJson.stakeholders.roles'
  | 'childrenMetaJson.state'
  | 'childrenMetaJson.staticMap.absolutePath'
  | 'childrenMetaJson.staticMap.accessTime'
  | 'childrenMetaJson.staticMap.atime'
  | 'childrenMetaJson.staticMap.atimeMs'
  | 'childrenMetaJson.staticMap.base'
  | 'childrenMetaJson.staticMap.birthTime'
  | 'childrenMetaJson.staticMap.birthtime'
  | 'childrenMetaJson.staticMap.birthtimeMs'
  | 'childrenMetaJson.staticMap.blksize'
  | 'childrenMetaJson.staticMap.blocks'
  | 'childrenMetaJson.staticMap.changeTime'
  | 'childrenMetaJson.staticMap.childGeometryJson.bbox'
  | 'childrenMetaJson.staticMap.childGeometryJson.children'
  | 'childrenMetaJson.staticMap.childGeometryJson.features'
  | 'childrenMetaJson.staticMap.childGeometryJson.id'
  | 'childrenMetaJson.staticMap.childGeometryJson.jsonId'
  | 'childrenMetaJson.staticMap.childGeometryJson.type'
  | 'childrenMetaJson.staticMap.childImageSharp.children'
  | 'childrenMetaJson.staticMap.childImageSharp.gatsbyImageData'
  | 'childrenMetaJson.staticMap.childImageSharp.id'
  | 'childrenMetaJson.staticMap.childMetaJson.children'
  | 'childrenMetaJson.staticMap.childMetaJson.cost'
  | 'childrenMetaJson.staticMap.childMetaJson.gatsbyPath'
  | 'childrenMetaJson.staticMap.childMetaJson.id'
  | 'childrenMetaJson.staticMap.childMetaJson.jsonId'
  | 'childrenMetaJson.staticMap.childMetaJson.stakeholders'
  | 'childrenMetaJson.staticMap.childMetaJson.state'
  | 'childrenMetaJson.staticMap.children'
  | 'childrenMetaJson.staticMap.childrenGeometryJson'
  | 'childrenMetaJson.staticMap.childrenGeometryJson.bbox'
  | 'childrenMetaJson.staticMap.childrenGeometryJson.children'
  | 'childrenMetaJson.staticMap.childrenGeometryJson.features'
  | 'childrenMetaJson.staticMap.childrenGeometryJson.id'
  | 'childrenMetaJson.staticMap.childrenGeometryJson.jsonId'
  | 'childrenMetaJson.staticMap.childrenGeometryJson.type'
  | 'childrenMetaJson.staticMap.childrenImageSharp'
  | 'childrenMetaJson.staticMap.childrenImageSharp.children'
  | 'childrenMetaJson.staticMap.childrenImageSharp.gatsbyImageData'
  | 'childrenMetaJson.staticMap.childrenImageSharp.id'
  | 'childrenMetaJson.staticMap.childrenMetaJson'
  | 'childrenMetaJson.staticMap.childrenMetaJson.children'
  | 'childrenMetaJson.staticMap.childrenMetaJson.cost'
  | 'childrenMetaJson.staticMap.childrenMetaJson.gatsbyPath'
  | 'childrenMetaJson.staticMap.childrenMetaJson.id'
  | 'childrenMetaJson.staticMap.childrenMetaJson.jsonId'
  | 'childrenMetaJson.staticMap.childrenMetaJson.stakeholders'
  | 'childrenMetaJson.staticMap.childrenMetaJson.state'
  | 'childrenMetaJson.staticMap.children.children'
  | 'childrenMetaJson.staticMap.children.id'
  | 'childrenMetaJson.staticMap.ctime'
  | 'childrenMetaJson.staticMap.ctimeMs'
  | 'childrenMetaJson.staticMap.dev'
  | 'childrenMetaJson.staticMap.dir'
  | 'childrenMetaJson.staticMap.ext'
  | 'childrenMetaJson.staticMap.extension'
  | 'childrenMetaJson.staticMap.gid'
  | 'childrenMetaJson.staticMap.hash'
  | 'childrenMetaJson.staticMap.id'
  | 'childrenMetaJson.staticMap.ino'
  | 'childrenMetaJson.staticMap.internal.content'
  | 'childrenMetaJson.staticMap.internal.contentDigest'
  | 'childrenMetaJson.staticMap.internal.description'
  | 'childrenMetaJson.staticMap.internal.fieldOwners'
  | 'childrenMetaJson.staticMap.internal.ignoreType'
  | 'childrenMetaJson.staticMap.internal.mediaType'
  | 'childrenMetaJson.staticMap.internal.owner'
  | 'childrenMetaJson.staticMap.internal.type'
  | 'childrenMetaJson.staticMap.mode'
  | 'childrenMetaJson.staticMap.modifiedTime'
  | 'childrenMetaJson.staticMap.mtime'
  | 'childrenMetaJson.staticMap.mtimeMs'
  | 'childrenMetaJson.staticMap.name'
  | 'childrenMetaJson.staticMap.nlink'
  | 'childrenMetaJson.staticMap.parent.children'
  | 'childrenMetaJson.staticMap.parent.id'
  | 'childrenMetaJson.staticMap.prettySize'
  | 'childrenMetaJson.staticMap.publicURL'
  | 'childrenMetaJson.staticMap.rdev'
  | 'childrenMetaJson.staticMap.relativeDirectory'
  | 'childrenMetaJson.staticMap.relativePath'
  | 'childrenMetaJson.staticMap.root'
  | 'childrenMetaJson.staticMap.size'
  | 'childrenMetaJson.staticMap.sourceInstanceName'
  | 'childrenMetaJson.staticMap.uid'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'hash'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'publicURL'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childGeometryJson: InputMaybe<GeometryJsonFilterInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childMetaJson: InputMaybe<MetaJsonFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenGeometryJson: InputMaybe<GeometryJsonFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenMetaJson: InputMaybe<MetaJsonFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type GeometryJson = Node & {
  readonly bbox: Maybe<ReadonlyArray<Maybe<Scalars['Float']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly crs: Maybe<GeometryJsonCrs>;
  readonly features: Maybe<ReadonlyArray<Maybe<GeometryJsonFeatures>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsonId: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly type: Maybe<Scalars['String']>;
};

type GeometryJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GeometryJsonEdge>;
  readonly group: ReadonlyArray<GeometryJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GeometryJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GeometryJsonConnection_distinctArgs = {
  field: GeometryJsonFieldsEnum;
};


type GeometryJsonConnection_groupArgs = {
  field: GeometryJsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GeometryJsonConnection_maxArgs = {
  field: GeometryJsonFieldsEnum;
};


type GeometryJsonConnection_minArgs = {
  field: GeometryJsonFieldsEnum;
};


type GeometryJsonConnection_sumArgs = {
  field: GeometryJsonFieldsEnum;
};

type GeometryJsonCrs = {
  readonly properties: Maybe<GeometryJsonCrsProperties>;
  readonly type: Maybe<Scalars['String']>;
};

type GeometryJsonCrsFilterInput = {
  readonly properties: InputMaybe<GeometryJsonCrsPropertiesFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type GeometryJsonCrsProperties = {
  readonly name: Maybe<Scalars['String']>;
};

type GeometryJsonCrsPropertiesFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type GeometryJsonEdge = {
  readonly next: Maybe<GeometryJson>;
  readonly node: GeometryJson;
  readonly previous: Maybe<GeometryJson>;
};

type GeometryJsonFeatures = {
  readonly bbox: Maybe<ReadonlyArray<Maybe<Scalars['Float']>>>;
  readonly geometry: Maybe<GeometryJsonFeaturesGeometry>;
  readonly properties: Maybe<GeometryJsonFeaturesProperties>;
  readonly type: Maybe<Scalars['String']>;
};

type GeometryJsonFeaturesFilterInput = {
  readonly bbox: InputMaybe<FloatQueryOperatorInput>;
  readonly geometry: InputMaybe<GeometryJsonFeaturesGeometryFilterInput>;
  readonly properties: InputMaybe<GeometryJsonFeaturesPropertiesFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type GeometryJsonFeaturesFilterListInput = {
  readonly elemMatch: InputMaybe<GeometryJsonFeaturesFilterInput>;
};

type GeometryJsonFeaturesGeometry = {
  readonly coordinates: Maybe<ReadonlyArray<Maybe<ReadonlyArray<Maybe<ReadonlyArray<Maybe<Scalars['Float']>>>>>>>;
  readonly type: Maybe<Scalars['String']>;
};

type GeometryJsonFeaturesGeometryFilterInput = {
  readonly coordinates: InputMaybe<FloatQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type GeometryJsonFeaturesProperties = {
  readonly description_planning_phase: Maybe<Scalars['String']>;
  readonly detail_level: Maybe<Scalars['String']>;
  readonly discarded: Maybe<Scalars['Boolean']>;
  readonly id: Maybe<Scalars['String']>;
  readonly id_rsv: Maybe<Scalars['String']>;
  readonly length: Maybe<Scalars['Float']>;
  readonly planning_phase: Maybe<Scalars['String']>;
  readonly stand: Maybe<Scalars['String']>;
  readonly state: Maybe<Scalars['String']>;
  readonly variant: Maybe<Scalars['String']>;
};

type GeometryJsonFeaturesPropertiesFilterInput = {
  readonly description_planning_phase: InputMaybe<StringQueryOperatorInput>;
  readonly detail_level: InputMaybe<StringQueryOperatorInput>;
  readonly discarded: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly id_rsv: InputMaybe<StringQueryOperatorInput>;
  readonly length: InputMaybe<FloatQueryOperatorInput>;
  readonly planning_phase: InputMaybe<StringQueryOperatorInput>;
  readonly stand: InputMaybe<StringQueryOperatorInput>;
  readonly state: InputMaybe<StringQueryOperatorInput>;
  readonly variant: InputMaybe<StringQueryOperatorInput>;
};

type GeometryJsonFieldsEnum =
  | 'bbox'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'crs.properties.name'
  | 'crs.type'
  | 'features'
  | 'features.bbox'
  | 'features.geometry.coordinates'
  | 'features.geometry.type'
  | 'features.properties.description_planning_phase'
  | 'features.properties.detail_level'
  | 'features.properties.discarded'
  | 'features.properties.id'
  | 'features.properties.id_rsv'
  | 'features.properties.length'
  | 'features.properties.planning_phase'
  | 'features.properties.stand'
  | 'features.properties.state'
  | 'features.properties.variant'
  | 'features.type'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsonId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'type';

type GeometryJsonFilterInput = {
  readonly bbox: InputMaybe<FloatQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly crs: InputMaybe<GeometryJsonCrsFilterInput>;
  readonly features: InputMaybe<GeometryJsonFeaturesFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsonId: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type GeometryJsonFilterListInput = {
  readonly elemMatch: InputMaybe<GeometryJsonFilterInput>;
};

type GeometryJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GeometryJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GeometryJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GeometryJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GeometryJsonGroupConnection_distinctArgs = {
  field: GeometryJsonFieldsEnum;
};


type GeometryJsonGroupConnection_groupArgs = {
  field: GeometryJsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GeometryJsonGroupConnection_maxArgs = {
  field: GeometryJsonFieldsEnum;
};


type GeometryJsonGroupConnection_minArgs = {
  field: GeometryJsonFieldsEnum;
};


type GeometryJsonGroupConnection_sumArgs = {
  field: GeometryJsonFieldsEnum;
};

type GeometryJsonSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<GeometryJsonFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MetaJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly cost: Maybe<Scalars['String']>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly general: Maybe<MetaJsonGeneral>;
  readonly geoJson: GeometryJson;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsonId: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly references: Maybe<MetaJsonReferences>;
  readonly stakeholders: Maybe<ReadonlyArray<Maybe<MetaJsonStakeholders>>>;
  readonly state: Maybe<Scalars['String']>;
  readonly staticMap: File;
};


type MetaJson_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};

type MetaJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MetaJsonEdge>;
  readonly group: ReadonlyArray<MetaJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MetaJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MetaJsonConnection_distinctArgs = {
  field: MetaJsonFieldsEnum;
};


type MetaJsonConnection_groupArgs = {
  field: MetaJsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MetaJsonConnection_maxArgs = {
  field: MetaJsonFieldsEnum;
};


type MetaJsonConnection_minArgs = {
  field: MetaJsonFieldsEnum;
};


type MetaJsonConnection_sumArgs = {
  field: MetaJsonFieldsEnum;
};

type MetaJsonEdge = {
  readonly next: Maybe<MetaJson>;
  readonly node: MetaJson;
  readonly previous: Maybe<MetaJson>;
};

type MetaJsonFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'cost'
  | 'gatsbyPath'
  | 'general.description'
  | 'general.from'
  | 'general.length'
  | 'general.name'
  | 'general.ref'
  | 'general.source'
  | 'general.to'
  | 'geoJson.bbox'
  | 'geoJson.children'
  | 'geoJson.children.children'
  | 'geoJson.children.children.children'
  | 'geoJson.children.children.id'
  | 'geoJson.children.id'
  | 'geoJson.children.internal.content'
  | 'geoJson.children.internal.contentDigest'
  | 'geoJson.children.internal.description'
  | 'geoJson.children.internal.fieldOwners'
  | 'geoJson.children.internal.ignoreType'
  | 'geoJson.children.internal.mediaType'
  | 'geoJson.children.internal.owner'
  | 'geoJson.children.internal.type'
  | 'geoJson.children.parent.children'
  | 'geoJson.children.parent.id'
  | 'geoJson.crs.properties.name'
  | 'geoJson.crs.type'
  | 'geoJson.features'
  | 'geoJson.features.bbox'
  | 'geoJson.features.geometry.coordinates'
  | 'geoJson.features.geometry.type'
  | 'geoJson.features.properties.description_planning_phase'
  | 'geoJson.features.properties.detail_level'
  | 'geoJson.features.properties.discarded'
  | 'geoJson.features.properties.id'
  | 'geoJson.features.properties.id_rsv'
  | 'geoJson.features.properties.length'
  | 'geoJson.features.properties.planning_phase'
  | 'geoJson.features.properties.stand'
  | 'geoJson.features.properties.state'
  | 'geoJson.features.properties.variant'
  | 'geoJson.features.type'
  | 'geoJson.id'
  | 'geoJson.internal.content'
  | 'geoJson.internal.contentDigest'
  | 'geoJson.internal.description'
  | 'geoJson.internal.fieldOwners'
  | 'geoJson.internal.ignoreType'
  | 'geoJson.internal.mediaType'
  | 'geoJson.internal.owner'
  | 'geoJson.internal.type'
  | 'geoJson.jsonId'
  | 'geoJson.parent.children'
  | 'geoJson.parent.children.children'
  | 'geoJson.parent.children.id'
  | 'geoJson.parent.id'
  | 'geoJson.parent.internal.content'
  | 'geoJson.parent.internal.contentDigest'
  | 'geoJson.parent.internal.description'
  | 'geoJson.parent.internal.fieldOwners'
  | 'geoJson.parent.internal.ignoreType'
  | 'geoJson.parent.internal.mediaType'
  | 'geoJson.parent.internal.owner'
  | 'geoJson.parent.internal.type'
  | 'geoJson.parent.parent.children'
  | 'geoJson.parent.parent.id'
  | 'geoJson.type'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsonId'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'references.website'
  | 'stakeholders'
  | 'stakeholders.name'
  | 'stakeholders.roles'
  | 'state'
  | 'staticMap.absolutePath'
  | 'staticMap.accessTime'
  | 'staticMap.atime'
  | 'staticMap.atimeMs'
  | 'staticMap.base'
  | 'staticMap.birthTime'
  | 'staticMap.birthtime'
  | 'staticMap.birthtimeMs'
  | 'staticMap.blksize'
  | 'staticMap.blocks'
  | 'staticMap.changeTime'
  | 'staticMap.childGeometryJson.bbox'
  | 'staticMap.childGeometryJson.children'
  | 'staticMap.childGeometryJson.children.children'
  | 'staticMap.childGeometryJson.children.id'
  | 'staticMap.childGeometryJson.crs.type'
  | 'staticMap.childGeometryJson.features'
  | 'staticMap.childGeometryJson.features.bbox'
  | 'staticMap.childGeometryJson.features.type'
  | 'staticMap.childGeometryJson.id'
  | 'staticMap.childGeometryJson.internal.content'
  | 'staticMap.childGeometryJson.internal.contentDigest'
  | 'staticMap.childGeometryJson.internal.description'
  | 'staticMap.childGeometryJson.internal.fieldOwners'
  | 'staticMap.childGeometryJson.internal.ignoreType'
  | 'staticMap.childGeometryJson.internal.mediaType'
  | 'staticMap.childGeometryJson.internal.owner'
  | 'staticMap.childGeometryJson.internal.type'
  | 'staticMap.childGeometryJson.jsonId'
  | 'staticMap.childGeometryJson.parent.children'
  | 'staticMap.childGeometryJson.parent.id'
  | 'staticMap.childGeometryJson.type'
  | 'staticMap.childImageSharp.children'
  | 'staticMap.childImageSharp.children.children'
  | 'staticMap.childImageSharp.children.id'
  | 'staticMap.childImageSharp.fixed.aspectRatio'
  | 'staticMap.childImageSharp.fixed.base64'
  | 'staticMap.childImageSharp.fixed.height'
  | 'staticMap.childImageSharp.fixed.originalName'
  | 'staticMap.childImageSharp.fixed.src'
  | 'staticMap.childImageSharp.fixed.srcSet'
  | 'staticMap.childImageSharp.fixed.srcSetWebp'
  | 'staticMap.childImageSharp.fixed.srcWebp'
  | 'staticMap.childImageSharp.fixed.tracedSVG'
  | 'staticMap.childImageSharp.fixed.width'
  | 'staticMap.childImageSharp.fluid.aspectRatio'
  | 'staticMap.childImageSharp.fluid.base64'
  | 'staticMap.childImageSharp.fluid.originalImg'
  | 'staticMap.childImageSharp.fluid.originalName'
  | 'staticMap.childImageSharp.fluid.presentationHeight'
  | 'staticMap.childImageSharp.fluid.presentationWidth'
  | 'staticMap.childImageSharp.fluid.sizes'
  | 'staticMap.childImageSharp.fluid.src'
  | 'staticMap.childImageSharp.fluid.srcSet'
  | 'staticMap.childImageSharp.fluid.srcSetWebp'
  | 'staticMap.childImageSharp.fluid.srcWebp'
  | 'staticMap.childImageSharp.fluid.tracedSVG'
  | 'staticMap.childImageSharp.gatsbyImageData'
  | 'staticMap.childImageSharp.id'
  | 'staticMap.childImageSharp.internal.content'
  | 'staticMap.childImageSharp.internal.contentDigest'
  | 'staticMap.childImageSharp.internal.description'
  | 'staticMap.childImageSharp.internal.fieldOwners'
  | 'staticMap.childImageSharp.internal.ignoreType'
  | 'staticMap.childImageSharp.internal.mediaType'
  | 'staticMap.childImageSharp.internal.owner'
  | 'staticMap.childImageSharp.internal.type'
  | 'staticMap.childImageSharp.original.height'
  | 'staticMap.childImageSharp.original.src'
  | 'staticMap.childImageSharp.original.width'
  | 'staticMap.childImageSharp.parent.children'
  | 'staticMap.childImageSharp.parent.id'
  | 'staticMap.childImageSharp.resize.aspectRatio'
  | 'staticMap.childImageSharp.resize.height'
  | 'staticMap.childImageSharp.resize.originalName'
  | 'staticMap.childImageSharp.resize.src'
  | 'staticMap.childImageSharp.resize.tracedSVG'
  | 'staticMap.childImageSharp.resize.width'
  | 'staticMap.childMetaJson.children'
  | 'staticMap.childMetaJson.children.children'
  | 'staticMap.childMetaJson.children.id'
  | 'staticMap.childMetaJson.cost'
  | 'staticMap.childMetaJson.gatsbyPath'
  | 'staticMap.childMetaJson.general.description'
  | 'staticMap.childMetaJson.general.from'
  | 'staticMap.childMetaJson.general.length'
  | 'staticMap.childMetaJson.general.name'
  | 'staticMap.childMetaJson.general.ref'
  | 'staticMap.childMetaJson.general.source'
  | 'staticMap.childMetaJson.general.to'
  | 'staticMap.childMetaJson.geoJson.bbox'
  | 'staticMap.childMetaJson.geoJson.children'
  | 'staticMap.childMetaJson.geoJson.features'
  | 'staticMap.childMetaJson.geoJson.id'
  | 'staticMap.childMetaJson.geoJson.jsonId'
  | 'staticMap.childMetaJson.geoJson.type'
  | 'staticMap.childMetaJson.id'
  | 'staticMap.childMetaJson.internal.content'
  | 'staticMap.childMetaJson.internal.contentDigest'
  | 'staticMap.childMetaJson.internal.description'
  | 'staticMap.childMetaJson.internal.fieldOwners'
  | 'staticMap.childMetaJson.internal.ignoreType'
  | 'staticMap.childMetaJson.internal.mediaType'
  | 'staticMap.childMetaJson.internal.owner'
  | 'staticMap.childMetaJson.internal.type'
  | 'staticMap.childMetaJson.jsonId'
  | 'staticMap.childMetaJson.parent.children'
  | 'staticMap.childMetaJson.parent.id'
  | 'staticMap.childMetaJson.references.website'
  | 'staticMap.childMetaJson.stakeholders'
  | 'staticMap.childMetaJson.stakeholders.name'
  | 'staticMap.childMetaJson.stakeholders.roles'
  | 'staticMap.childMetaJson.state'
  | 'staticMap.childMetaJson.staticMap.absolutePath'
  | 'staticMap.childMetaJson.staticMap.accessTime'
  | 'staticMap.childMetaJson.staticMap.atime'
  | 'staticMap.childMetaJson.staticMap.atimeMs'
  | 'staticMap.childMetaJson.staticMap.base'
  | 'staticMap.childMetaJson.staticMap.birthTime'
  | 'staticMap.childMetaJson.staticMap.birthtime'
  | 'staticMap.childMetaJson.staticMap.birthtimeMs'
  | 'staticMap.childMetaJson.staticMap.blksize'
  | 'staticMap.childMetaJson.staticMap.blocks'
  | 'staticMap.childMetaJson.staticMap.changeTime'
  | 'staticMap.childMetaJson.staticMap.children'
  | 'staticMap.childMetaJson.staticMap.childrenGeometryJson'
  | 'staticMap.childMetaJson.staticMap.childrenImageSharp'
  | 'staticMap.childMetaJson.staticMap.childrenMetaJson'
  | 'staticMap.childMetaJson.staticMap.ctime'
  | 'staticMap.childMetaJson.staticMap.ctimeMs'
  | 'staticMap.childMetaJson.staticMap.dev'
  | 'staticMap.childMetaJson.staticMap.dir'
  | 'staticMap.childMetaJson.staticMap.ext'
  | 'staticMap.childMetaJson.staticMap.extension'
  | 'staticMap.childMetaJson.staticMap.gid'
  | 'staticMap.childMetaJson.staticMap.hash'
  | 'staticMap.childMetaJson.staticMap.id'
  | 'staticMap.childMetaJson.staticMap.ino'
  | 'staticMap.childMetaJson.staticMap.mode'
  | 'staticMap.childMetaJson.staticMap.modifiedTime'
  | 'staticMap.childMetaJson.staticMap.mtime'
  | 'staticMap.childMetaJson.staticMap.mtimeMs'
  | 'staticMap.childMetaJson.staticMap.name'
  | 'staticMap.childMetaJson.staticMap.nlink'
  | 'staticMap.childMetaJson.staticMap.prettySize'
  | 'staticMap.childMetaJson.staticMap.publicURL'
  | 'staticMap.childMetaJson.staticMap.rdev'
  | 'staticMap.childMetaJson.staticMap.relativeDirectory'
  | 'staticMap.childMetaJson.staticMap.relativePath'
  | 'staticMap.childMetaJson.staticMap.root'
  | 'staticMap.childMetaJson.staticMap.size'
  | 'staticMap.childMetaJson.staticMap.sourceInstanceName'
  | 'staticMap.childMetaJson.staticMap.uid'
  | 'staticMap.children'
  | 'staticMap.childrenGeometryJson'
  | 'staticMap.childrenGeometryJson.bbox'
  | 'staticMap.childrenGeometryJson.children'
  | 'staticMap.childrenGeometryJson.children.children'
  | 'staticMap.childrenGeometryJson.children.id'
  | 'staticMap.childrenGeometryJson.crs.type'
  | 'staticMap.childrenGeometryJson.features'
  | 'staticMap.childrenGeometryJson.features.bbox'
  | 'staticMap.childrenGeometryJson.features.type'
  | 'staticMap.childrenGeometryJson.id'
  | 'staticMap.childrenGeometryJson.internal.content'
  | 'staticMap.childrenGeometryJson.internal.contentDigest'
  | 'staticMap.childrenGeometryJson.internal.description'
  | 'staticMap.childrenGeometryJson.internal.fieldOwners'
  | 'staticMap.childrenGeometryJson.internal.ignoreType'
  | 'staticMap.childrenGeometryJson.internal.mediaType'
  | 'staticMap.childrenGeometryJson.internal.owner'
  | 'staticMap.childrenGeometryJson.internal.type'
  | 'staticMap.childrenGeometryJson.jsonId'
  | 'staticMap.childrenGeometryJson.parent.children'
  | 'staticMap.childrenGeometryJson.parent.id'
  | 'staticMap.childrenGeometryJson.type'
  | 'staticMap.childrenImageSharp'
  | 'staticMap.childrenImageSharp.children'
  | 'staticMap.childrenImageSharp.children.children'
  | 'staticMap.childrenImageSharp.children.id'
  | 'staticMap.childrenImageSharp.fixed.aspectRatio'
  | 'staticMap.childrenImageSharp.fixed.base64'
  | 'staticMap.childrenImageSharp.fixed.height'
  | 'staticMap.childrenImageSharp.fixed.originalName'
  | 'staticMap.childrenImageSharp.fixed.src'
  | 'staticMap.childrenImageSharp.fixed.srcSet'
  | 'staticMap.childrenImageSharp.fixed.srcSetWebp'
  | 'staticMap.childrenImageSharp.fixed.srcWebp'
  | 'staticMap.childrenImageSharp.fixed.tracedSVG'
  | 'staticMap.childrenImageSharp.fixed.width'
  | 'staticMap.childrenImageSharp.fluid.aspectRatio'
  | 'staticMap.childrenImageSharp.fluid.base64'
  | 'staticMap.childrenImageSharp.fluid.originalImg'
  | 'staticMap.childrenImageSharp.fluid.originalName'
  | 'staticMap.childrenImageSharp.fluid.presentationHeight'
  | 'staticMap.childrenImageSharp.fluid.presentationWidth'
  | 'staticMap.childrenImageSharp.fluid.sizes'
  | 'staticMap.childrenImageSharp.fluid.src'
  | 'staticMap.childrenImageSharp.fluid.srcSet'
  | 'staticMap.childrenImageSharp.fluid.srcSetWebp'
  | 'staticMap.childrenImageSharp.fluid.srcWebp'
  | 'staticMap.childrenImageSharp.fluid.tracedSVG'
  | 'staticMap.childrenImageSharp.gatsbyImageData'
  | 'staticMap.childrenImageSharp.id'
  | 'staticMap.childrenImageSharp.internal.content'
  | 'staticMap.childrenImageSharp.internal.contentDigest'
  | 'staticMap.childrenImageSharp.internal.description'
  | 'staticMap.childrenImageSharp.internal.fieldOwners'
  | 'staticMap.childrenImageSharp.internal.ignoreType'
  | 'staticMap.childrenImageSharp.internal.mediaType'
  | 'staticMap.childrenImageSharp.internal.owner'
  | 'staticMap.childrenImageSharp.internal.type'
  | 'staticMap.childrenImageSharp.original.height'
  | 'staticMap.childrenImageSharp.original.src'
  | 'staticMap.childrenImageSharp.original.width'
  | 'staticMap.childrenImageSharp.parent.children'
  | 'staticMap.childrenImageSharp.parent.id'
  | 'staticMap.childrenImageSharp.resize.aspectRatio'
  | 'staticMap.childrenImageSharp.resize.height'
  | 'staticMap.childrenImageSharp.resize.originalName'
  | 'staticMap.childrenImageSharp.resize.src'
  | 'staticMap.childrenImageSharp.resize.tracedSVG'
  | 'staticMap.childrenImageSharp.resize.width'
  | 'staticMap.childrenMetaJson'
  | 'staticMap.childrenMetaJson.children'
  | 'staticMap.childrenMetaJson.children.children'
  | 'staticMap.childrenMetaJson.children.id'
  | 'staticMap.childrenMetaJson.cost'
  | 'staticMap.childrenMetaJson.gatsbyPath'
  | 'staticMap.childrenMetaJson.general.description'
  | 'staticMap.childrenMetaJson.general.from'
  | 'staticMap.childrenMetaJson.general.length'
  | 'staticMap.childrenMetaJson.general.name'
  | 'staticMap.childrenMetaJson.general.ref'
  | 'staticMap.childrenMetaJson.general.source'
  | 'staticMap.childrenMetaJson.general.to'
  | 'staticMap.childrenMetaJson.geoJson.bbox'
  | 'staticMap.childrenMetaJson.geoJson.children'
  | 'staticMap.childrenMetaJson.geoJson.features'
  | 'staticMap.childrenMetaJson.geoJson.id'
  | 'staticMap.childrenMetaJson.geoJson.jsonId'
  | 'staticMap.childrenMetaJson.geoJson.type'
  | 'staticMap.childrenMetaJson.id'
  | 'staticMap.childrenMetaJson.internal.content'
  | 'staticMap.childrenMetaJson.internal.contentDigest'
  | 'staticMap.childrenMetaJson.internal.description'
  | 'staticMap.childrenMetaJson.internal.fieldOwners'
  | 'staticMap.childrenMetaJson.internal.ignoreType'
  | 'staticMap.childrenMetaJson.internal.mediaType'
  | 'staticMap.childrenMetaJson.internal.owner'
  | 'staticMap.childrenMetaJson.internal.type'
  | 'staticMap.childrenMetaJson.jsonId'
  | 'staticMap.childrenMetaJson.parent.children'
  | 'staticMap.childrenMetaJson.parent.id'
  | 'staticMap.childrenMetaJson.references.website'
  | 'staticMap.childrenMetaJson.stakeholders'
  | 'staticMap.childrenMetaJson.stakeholders.name'
  | 'staticMap.childrenMetaJson.stakeholders.roles'
  | 'staticMap.childrenMetaJson.state'
  | 'staticMap.childrenMetaJson.staticMap.absolutePath'
  | 'staticMap.childrenMetaJson.staticMap.accessTime'
  | 'staticMap.childrenMetaJson.staticMap.atime'
  | 'staticMap.childrenMetaJson.staticMap.atimeMs'
  | 'staticMap.childrenMetaJson.staticMap.base'
  | 'staticMap.childrenMetaJson.staticMap.birthTime'
  | 'staticMap.childrenMetaJson.staticMap.birthtime'
  | 'staticMap.childrenMetaJson.staticMap.birthtimeMs'
  | 'staticMap.childrenMetaJson.staticMap.blksize'
  | 'staticMap.childrenMetaJson.staticMap.blocks'
  | 'staticMap.childrenMetaJson.staticMap.changeTime'
  | 'staticMap.childrenMetaJson.staticMap.children'
  | 'staticMap.childrenMetaJson.staticMap.childrenGeometryJson'
  | 'staticMap.childrenMetaJson.staticMap.childrenImageSharp'
  | 'staticMap.childrenMetaJson.staticMap.childrenMetaJson'
  | 'staticMap.childrenMetaJson.staticMap.ctime'
  | 'staticMap.childrenMetaJson.staticMap.ctimeMs'
  | 'staticMap.childrenMetaJson.staticMap.dev'
  | 'staticMap.childrenMetaJson.staticMap.dir'
  | 'staticMap.childrenMetaJson.staticMap.ext'
  | 'staticMap.childrenMetaJson.staticMap.extension'
  | 'staticMap.childrenMetaJson.staticMap.gid'
  | 'staticMap.childrenMetaJson.staticMap.hash'
  | 'staticMap.childrenMetaJson.staticMap.id'
  | 'staticMap.childrenMetaJson.staticMap.ino'
  | 'staticMap.childrenMetaJson.staticMap.mode'
  | 'staticMap.childrenMetaJson.staticMap.modifiedTime'
  | 'staticMap.childrenMetaJson.staticMap.mtime'
  | 'staticMap.childrenMetaJson.staticMap.mtimeMs'
  | 'staticMap.childrenMetaJson.staticMap.name'
  | 'staticMap.childrenMetaJson.staticMap.nlink'
  | 'staticMap.childrenMetaJson.staticMap.prettySize'
  | 'staticMap.childrenMetaJson.staticMap.publicURL'
  | 'staticMap.childrenMetaJson.staticMap.rdev'
  | 'staticMap.childrenMetaJson.staticMap.relativeDirectory'
  | 'staticMap.childrenMetaJson.staticMap.relativePath'
  | 'staticMap.childrenMetaJson.staticMap.root'
  | 'staticMap.childrenMetaJson.staticMap.size'
  | 'staticMap.childrenMetaJson.staticMap.sourceInstanceName'
  | 'staticMap.childrenMetaJson.staticMap.uid'
  | 'staticMap.children.children'
  | 'staticMap.children.children.children'
  | 'staticMap.children.children.id'
  | 'staticMap.children.id'
  | 'staticMap.children.internal.content'
  | 'staticMap.children.internal.contentDigest'
  | 'staticMap.children.internal.description'
  | 'staticMap.children.internal.fieldOwners'
  | 'staticMap.children.internal.ignoreType'
  | 'staticMap.children.internal.mediaType'
  | 'staticMap.children.internal.owner'
  | 'staticMap.children.internal.type'
  | 'staticMap.children.parent.children'
  | 'staticMap.children.parent.id'
  | 'staticMap.ctime'
  | 'staticMap.ctimeMs'
  | 'staticMap.dev'
  | 'staticMap.dir'
  | 'staticMap.ext'
  | 'staticMap.extension'
  | 'staticMap.gid'
  | 'staticMap.hash'
  | 'staticMap.id'
  | 'staticMap.ino'
  | 'staticMap.internal.content'
  | 'staticMap.internal.contentDigest'
  | 'staticMap.internal.description'
  | 'staticMap.internal.fieldOwners'
  | 'staticMap.internal.ignoreType'
  | 'staticMap.internal.mediaType'
  | 'staticMap.internal.owner'
  | 'staticMap.internal.type'
  | 'staticMap.mode'
  | 'staticMap.modifiedTime'
  | 'staticMap.mtime'
  | 'staticMap.mtimeMs'
  | 'staticMap.name'
  | 'staticMap.nlink'
  | 'staticMap.parent.children'
  | 'staticMap.parent.children.children'
  | 'staticMap.parent.children.id'
  | 'staticMap.parent.id'
  | 'staticMap.parent.internal.content'
  | 'staticMap.parent.internal.contentDigest'
  | 'staticMap.parent.internal.description'
  | 'staticMap.parent.internal.fieldOwners'
  | 'staticMap.parent.internal.ignoreType'
  | 'staticMap.parent.internal.mediaType'
  | 'staticMap.parent.internal.owner'
  | 'staticMap.parent.internal.type'
  | 'staticMap.parent.parent.children'
  | 'staticMap.parent.parent.id'
  | 'staticMap.prettySize'
  | 'staticMap.publicURL'
  | 'staticMap.rdev'
  | 'staticMap.relativeDirectory'
  | 'staticMap.relativePath'
  | 'staticMap.root'
  | 'staticMap.size'
  | 'staticMap.sourceInstanceName'
  | 'staticMap.uid';

type MetaJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly cost: InputMaybe<StringQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly general: InputMaybe<MetaJsonGeneralFilterInput>;
  readonly geoJson: InputMaybe<GeometryJsonFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsonId: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly references: InputMaybe<MetaJsonReferencesFilterInput>;
  readonly stakeholders: InputMaybe<MetaJsonStakeholdersFilterListInput>;
  readonly state: InputMaybe<StringQueryOperatorInput>;
  readonly staticMap: InputMaybe<FileFilterInput>;
};

type MetaJsonFilterListInput = {
  readonly elemMatch: InputMaybe<MetaJsonFilterInput>;
};

type MetaJsonGeneral = {
  readonly description: Maybe<Scalars['String']>;
  readonly from: Maybe<Scalars['String']>;
  readonly length: Maybe<Scalars['Float']>;
  readonly name: Maybe<Scalars['String']>;
  readonly ref: Maybe<Scalars['String']>;
  readonly source: Maybe<Scalars['String']>;
  readonly to: Maybe<Scalars['String']>;
};

type MetaJsonGeneralFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly from: InputMaybe<StringQueryOperatorInput>;
  readonly length: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly ref: InputMaybe<StringQueryOperatorInput>;
  readonly source: InputMaybe<StringQueryOperatorInput>;
  readonly to: InputMaybe<StringQueryOperatorInput>;
};

type MetaJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MetaJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MetaJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MetaJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MetaJsonGroupConnection_distinctArgs = {
  field: MetaJsonFieldsEnum;
};


type MetaJsonGroupConnection_groupArgs = {
  field: MetaJsonFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MetaJsonGroupConnection_maxArgs = {
  field: MetaJsonFieldsEnum;
};


type MetaJsonGroupConnection_minArgs = {
  field: MetaJsonFieldsEnum;
};


type MetaJsonGroupConnection_sumArgs = {
  field: MetaJsonFieldsEnum;
};

type MetaJsonReferences = {
  readonly website: Maybe<Scalars['String']>;
};

type MetaJsonReferencesFilterInput = {
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type MetaJsonSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MetaJsonFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MetaJsonStakeholders = {
  readonly name: Maybe<Scalars['String']>;
  readonly roles: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};

type MetaJsonStakeholdersFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly roles: InputMaybe<StringQueryOperatorInput>;
};

type MetaJsonStakeholdersFilterListInput = {
  readonly elemMatch: InputMaybe<MetaJsonStakeholdersFilterInput>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allGeometryJson: GeometryJsonConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMetaJson: MetaJsonConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly geometryJson: Maybe<GeometryJson>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly metaJson: Maybe<MetaJson>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allGeometryJsonArgs = {
  filter: InputMaybe<GeometryJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<GeometryJsonSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allMetaJsonArgs = {
  filter: InputMaybe<MetaJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MetaJsonSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childGeometryJson: InputMaybe<GeometryJsonFilterInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childMetaJson: InputMaybe<MetaJsonFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenGeometryJson: InputMaybe<GeometryJsonFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenMetaJson: InputMaybe<MetaJsonFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_geometryJsonArgs = {
  bbox: InputMaybe<FloatQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  crs: InputMaybe<GeometryJsonCrsFilterInput>;
  features: InputMaybe<GeometryJsonFeaturesFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsonId: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  type: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_metaJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  cost: InputMaybe<StringQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  general: InputMaybe<MetaJsonGeneralFilterInput>;
  geoJson: InputMaybe<GeometryJsonFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsonId: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  references: InputMaybe<MetaJsonReferencesFilterInput>;
  stakeholders: InputMaybe<MetaJsonStakeholdersFilterListInput>;
  state: InputMaybe<StringQueryOperatorInput>;
  staticMap: InputMaybe<FileFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.description'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type SteckbriefQueryVariables = Exact<{
  jsonId: Scalars['String'];
}>;


type SteckbriefQuery = { readonly geometry: { readonly type: string | null, readonly bbox: ReadonlyArray<number | null> | null, readonly id: string | null, readonly features: ReadonlyArray<{ readonly type: string | null, readonly bbox: ReadonlyArray<number | null> | null, readonly geometry: { readonly coordinates: ReadonlyArray<ReadonlyArray<ReadonlyArray<number | null> | null> | null> | null, readonly type: string | null } | null, readonly properties: { readonly variant: string | null, readonly state: string | null, readonly planning_phase: string | null, readonly length: number | null, readonly id_rsv: string | null, readonly id: string | null, readonly detail_level: string | null } | null } | null> | null } | null, readonly meta: { readonly cost: string | null, readonly state: string | null, readonly general: { readonly description: string | null, readonly from: string | null, readonly name: string | null, readonly ref: string | null, readonly to: string | null, readonly source: string | null, readonly length: number | null } | null, readonly references: { readonly website: string | null } | null, readonly staticMap: { readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } } | null };

type SteckbriefeIndexQueryVariables = Exact<{ [key: string]: never; }>;


type SteckbriefeIndexQuery = { readonly radschnellwege: { readonly nodes: ReadonlyArray<{ readonly jsonId: string | null, readonly general: { readonly ref: string | null, readonly name: string | null, readonly description: string | null } | null, readonly staticMap: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } }> } };


}
